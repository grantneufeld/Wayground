# This file was generated by Cucumber-Rails and may be overwritten in future.

ENV["RAILS_ENV"] ||= "test"
require File.expand_path(File.dirname(__FILE__) + '/../../config/simple_cov_config')
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
require 'ruby-debug'

#require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support
require 'cucumber/rails'
#require 'cucumber/rails/rspec'
#require 'cucumber/rails/world'
#require 'cucumber/rails/active_record'
#require 'cucumber/web/tableish'

require 'webrat'
require 'webrat/core/matchers'

Webrat.configure do |config|
  config.mode = :rack
  config.open_error_files = false # Set to true if you want error pages to pop up in the browser
end


# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
#Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove this line if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
DatabaseCleaner.strategy = :transaction

## If you set this to true, each scenario will run in a database transaction.
## You can still turn off transactions on a per-scenario basis, simply tagging
## a feature or scenario with the @no-txn tag. If you are using Capybara,
## tagging with @culerity or @javascript will also turn transactions off.
##
## If you set this to false, transactions will be off for all scenarios,
## regardless of whether you use @no-txn or not.
##
## Beware that turning transactions off will leave data in your database
## after each scenario, which can lead to hard-to-debug failures in
## subsequent scenarios. If you do this, we recommend you create a Before
## block that will explicitly put your database in a known state.
#Cucumber::Rails::World.use_transactional_fixtures = true
## How to clean your database when transactions are turned off. See
## http://github.com/bmabey/database_cleaner for more info.
#if defined?(ActiveRecord::Base)
#  begin
#    require 'database_cleaner'
#    DatabaseCleaner.strategy = :truncation
#  rescue LoadError => ignore_if_database_cleaner_not_present
#  end
#end
