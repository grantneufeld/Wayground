# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

ENV["RAILS_ENV"] ||= "test"
require File.expand_path(File.dirname(__FILE__) + '/../../config/simple_cov_config')
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
require 'ruby-debug'

#require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support
require 'cucumber/rails'
#require 'cucumber/rails/rspec'
#require 'cucumber/rails/world'
#require 'cucumber/rails/active_record'
#require 'cucumber/web/tableish'


# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     DatabaseCleaner.strategy = :truncation, {:except => %w[widgets]}
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

## If you set this to true, each scenario will run in a database transaction.
## You can still turn off transactions on a per-scenario basis, simply tagging
## a feature or scenario with the @no-txn tag. If you are using Capybara,
## tagging with @culerity or @javascript will also turn transactions off.
##
## If you set this to false, transactions will be off for all scenarios,
## regardless of whether you use @no-txn or not.
##
## Beware that turning transactions off will leave data in your database
## after each scenario, which can lead to hard-to-debug failures in
## subsequent scenarios. If you do this, we recommend you create a Before
## block that will explicitly put your database in a known state.
#Cucumber::Rails::World.use_transactional_fixtures = true
## How to clean your database when transactions are turned off. See
## http://github.com/bmabey/database_cleaner for more info.
#if defined?(ActiveRecord::Base)
#  begin
#    require 'database_cleaner'
#    DatabaseCleaner.strategy = :truncation
#  rescue LoadError => ignore_if_database_cleaner_not_present
#  end
#end
