= Testing the code

These are instructions for testing the code, and guidelines for writing tests.


== Unit Testing With Rspec

To run the unit tests:
> bundle exec rspec

=== Autotest

While working on the code, you can have autotest continuously running in a terminal to alert you when a change you make causes a test to fail. I have it configured to run the rspec test suite.

> bundle exec autotest


== Cucumber

The Cucumber features are the most critical piece of testing; code should not be written without being fully covered by Cucumber feature scripts (run the tests and then review coverage/index.html before doing a check-in).

To run the cucumber feature scenarios:
> bundle exec rake cucumber

There are two special tags to be used when writing feature scenarios. Tags are put on the line before a “Scenario:”, or on the first line of the feature file (to apply to all scenarios in the file).
* ‘@future’: Have the scenario(s) ignored completely when running cucumber. This allows for using the feature files to describe future features in context (a sort of “to-do” list).
* ‘@wip’: Work in progress. These are for the scenarios you are currently working on (in general, there should be no more than 3 of these active at a time). These scenarios will not run during the normal cucumber execution, since they are expected to fail (being incomplete). You can run just the @wip scenarios while your work is in progress:
> bundle exec rake cucumber:wip

If you need to test Javascript in the context of your features, you can tag scenarios with ‘@javascript’.
Capybara also provides explicit @selenium, @culerity and @rack_test tags to define which handler to use.


== Metrics

=== Code Coverage

I’m using SimpleCov for code coverage analysis. In the current setup, the coverage reports are automatically updated when the test suites are run. See `reports/coverage/index.html` for the report.

https://github.com/colszowka/simplecov

=== Code Quality Testing

I’m using the following gems to do code analysis and metrics.

• brakeman: Detects possible security risks.
• churn: Tracking how frequently given files, classes and methods change (based on check-ins).
• flay: Detection of structural similarities across code (i.e.: possible duplication).
• flog: Analyses overly complex (“tortured”) code.
• rails_best_practices: Identifies code that is considered to violate “best practices” for rails programming.
• reek: Detection of “code smells” — code that could likely benefit from clarification or refactoring.

They are all called from the `preflight` script in the project root.
